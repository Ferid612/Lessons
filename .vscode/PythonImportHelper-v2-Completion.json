[
    {
        "label": "module_1",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "module_1",
        "description": "module_1",
        "detail": "module_1",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "say_hello",
        "importPath": "Ders_4",
        "description": "Ders_4",
        "isExtraImport": true,
        "detail": "Ders_4",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "random",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "run_copy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "run_copy",
        "description": "run_copy",
        "detail": "run_copy",
        "documentation": {}
    },
    {
        "label": "numpy_ones",
        "importPath": "Codes.Others.numpy_examples",
        "description": "Codes.Others.numpy_examples",
        "isExtraImport": true,
        "detail": "Codes.Others.numpy_examples",
        "documentation": {}
    },
    {
        "label": "cemini_tap",
        "kind": 2,
        "importPath": "Codes.Lesson Subjects.ModuleExample.module_1",
        "description": "Codes.Lesson Subjects.ModuleExample.module_1",
        "peekOfCode": "def cemini_tap(x, y):\n    return x + y\ndef hasili_tap(x, y):\n    return x * y\n# Bankomatlarin isleme sistemi \nuserler = {\n    {\n        \"name\": \"Hasan\",\n        \"surname\": \"Hesenov\",\n        \"bank_card_code\": 40986793,",
        "detail": "Codes.Lesson Subjects.ModuleExample.module_1",
        "documentation": {}
    },
    {
        "label": "hasili_tap",
        "kind": 2,
        "importPath": "Codes.Lesson Subjects.ModuleExample.module_1",
        "description": "Codes.Lesson Subjects.ModuleExample.module_1",
        "peekOfCode": "def hasili_tap(x, y):\n    return x * y\n# Bankomatlarin isleme sistemi \nuserler = {\n    {\n        \"name\": \"Hasan\",\n        \"surname\": \"Hesenov\",\n        \"bank_card_code\": 40986793,\n        \"bank_card_csv\":123,\n        \"password\":1243,",
        "detail": "Codes.Lesson Subjects.ModuleExample.module_1",
        "documentation": {}
    },
    {
        "label": "userler",
        "kind": 5,
        "importPath": "Codes.Lesson Subjects.ModuleExample.module_1",
        "description": "Codes.Lesson Subjects.ModuleExample.module_1",
        "peekOfCode": "userler = {\n    {\n        \"name\": \"Hasan\",\n        \"surname\": \"Hesenov\",\n        \"bank_card_code\": 40986793,\n        \"bank_card_csv\":123,\n        \"password\":1243,\n        \"balance\": 23.2\n    },\n    {",
        "detail": "Codes.Lesson Subjects.ModuleExample.module_1",
        "documentation": {}
    },
    {
        "label": "cem",
        "kind": 5,
        "importPath": "Codes.Lesson Subjects.ModuleExample.module_2",
        "description": "Codes.Lesson Subjects.ModuleExample.module_2",
        "peekOfCode": "cem = module_1.cemini_tap(10,20)\nprint(sqrt(cem))\nhasil = module_1.hasili_tap(10,20)\nprint(hasil)\n# from datetime import datetime\n# import time \n# time_1 = datetime.now()\n# for a in range(5):\n#     time.sleep(1)\n#     print(a)",
        "detail": "Codes.Lesson Subjects.ModuleExample.module_2",
        "documentation": {}
    },
    {
        "label": "hasil",
        "kind": 5,
        "importPath": "Codes.Lesson Subjects.ModuleExample.module_2",
        "description": "Codes.Lesson Subjects.ModuleExample.module_2",
        "peekOfCode": "hasil = module_1.hasili_tap(10,20)\nprint(hasil)\n# from datetime import datetime\n# import time \n# time_1 = datetime.now()\n# for a in range(5):\n#     time.sleep(1)\n#     print(a)\n# time_2 = datetime.now()\n# difference = time_2 - time_1",
        "detail": "Codes.Lesson Subjects.ModuleExample.module_2",
        "documentation": {}
    },
    {
        "label": "list_a",
        "kind": 5,
        "importPath": "Codes.Lesson Subjects.Ders 2",
        "description": "Codes.Lesson Subjects.Ders 2",
        "peekOfCode": "list_a =  range(20, 410000)\n# list_a =  range(20, 41000000, 2)\n# list_a =  range(20, 41000000, 2)\n# list_a =  range(20, 41000000, 2)\n# print(list_a)\n# list_a = list_a[::3]\n# print(list_a)\n# print(list_a)\n# x = range(21,200)[5]\n# print(x)",
        "detail": "Codes.Lesson Subjects.Ders 2",
        "documentation": {}
    },
    {
        "label": "adlar",
        "kind": 5,
        "importPath": "Codes.Lesson Subjects.Ders 2",
        "description": "Codes.Lesson Subjects.Ders 2",
        "peekOfCode": "adlar = [\"Eziz\",\"Ramiz\",\"Lale\",\"Baleeli\"]\n# print(len(adlar)) #-- listlerin uzunlugunu olcusunu length \nfor item in range(len(adlar)):\n    print(item, adlar[item])\n# ededler = [1,2,3,4,5,6,7,8,9]\n# for i in range( len(ededler)  ):\n#     print(i, ededler[i])\n#! Nəzrinlə burada qaldıq \n# print(len(a))\n# a = \"Hello, World!\"",
        "detail": "Codes.Lesson Subjects.Ders 2",
        "documentation": {}
    },
    {
        "label": "Human",
        "kind": 6,
        "importPath": "Codes.Lesson Subjects.Ders 4_1",
        "description": "Codes.Lesson Subjects.Ders 4_1",
        "peekOfCode": "class Human:\n    name = \"Adem\"\n    surname= \"Ademoglu\"\n    def __init__(self, ad, soyad):\n        print(\"in init:\",ad)\n        self.name = ad\n        self.surname = soyad\n    def teqdimet(self):\n        print(self.name)\n        print(self.surname)",
        "detail": "Codes.Lesson Subjects.Ders 4_1",
        "documentation": {}
    },
    {
        "label": "Math",
        "kind": 6,
        "importPath": "Codes.Lesson Subjects.Ders 4_1",
        "description": "Codes.Lesson Subjects.Ders 4_1",
        "peekOfCode": "class Math:\n    name = \"Adem\"\n    surname= \"Ademoglu\"\n    def __init__(self, ad, soyad):\n        print(\"in init:\",ad)\n        self.name = ad\n        self.surname = soyad\n    def toplame(self):\n        print(self.name)\n        print(self.surname)",
        "detail": "Codes.Lesson Subjects.Ders 4_1",
        "documentation": {}
    },
    {
        "label": "Human",
        "kind": 6,
        "importPath": "Codes.Lesson Subjects.Ders 4_1",
        "description": "Codes.Lesson Subjects.Ders 4_1",
        "peekOfCode": "class Human:\n    def __init__(self,name,last,age):\n        self.name = name\n        self.last = last\n        self.age = age\n    def yemek_yemek(self):\n        print(f\"{self.name} yemek yedi.\")\n    def yas_artmaq(self):\n        self.age = self.age + 1\n        print(f\"{self.name} yas artdi. yeni yas:{self.age}\")",
        "detail": "Codes.Lesson Subjects.Ders 4_1",
        "documentation": {}
    },
    {
        "label": "Hekim",
        "kind": 6,
        "importPath": "Codes.Lesson Subjects.Ders 4_1",
        "description": "Codes.Lesson Subjects.Ders 4_1",
        "peekOfCode": "class Hekim(Human):\n    def __init__(self,name,last, age):\n        super().__init__(name,last,age)\n    def xesteni_muayine_et(self, name):\n        #####\n        print(f\"Xeste muayine edildi. Netice: {name}`nin Başı çatmır\")\n# nezrin_obj = Hekim(\"Nezrin\",\"Teymurova\", 23)\n# nezrin_obj.xesteni_muayine_et(\"Sebuhi\")\n# print(nezrin_obj.name)\n# print(nezrin_obj.last)",
        "detail": "Codes.Lesson Subjects.Ders 4_1",
        "documentation": {}
    },
    {
        "label": "usaq1",
        "kind": 5,
        "importPath": "Codes.Lesson Subjects.Ders 4_1",
        "description": "Codes.Lesson Subjects.Ders 4_1",
        "peekOfCode": "usaq1 = {\n    \"name\":\"hasan\",\n    \"surname\":\"aliyev\",\n    \"age\":23\n}\nusaq2 = {\n    \"name\":\"hasan\",\n    \"surname\":\"aliyev\",\n    \"age\":23\n}",
        "detail": "Codes.Lesson Subjects.Ders 4_1",
        "documentation": {}
    },
    {
        "label": "usaq2",
        "kind": 5,
        "importPath": "Codes.Lesson Subjects.Ders 4_1",
        "description": "Codes.Lesson Subjects.Ders 4_1",
        "peekOfCode": "usaq2 = {\n    \"name\":\"hasan\",\n    \"surname\":\"aliyev\",\n    \"age\":23\n}\nusaq3 = {\n    \"name\":\"hasan\",\n    \"surname\":\"aliyev\",\n    \"age\":23\n}",
        "detail": "Codes.Lesson Subjects.Ders 4_1",
        "documentation": {}
    },
    {
        "label": "usaq3",
        "kind": 5,
        "importPath": "Codes.Lesson Subjects.Ders 4_1",
        "description": "Codes.Lesson Subjects.Ders 4_1",
        "peekOfCode": "usaq3 = {\n    \"name\":\"hasan\",\n    \"surname\":\"aliyev\",\n    \"age\":23\n}\n# sinif ={\n#     \"parta_sayi\":20,\n#     \"useqlar\":[usaq1,usaq2,usaq3]\n# }\n# sinif[\"useqlar\"][0]",
        "detail": "Codes.Lesson Subjects.Ders 4_1",
        "documentation": {}
    },
    {
        "label": "file_text",
        "kind": 5,
        "importPath": "Codes.Lesson Subjects.Ders 5",
        "description": "Codes.Lesson Subjects.Ders 5",
        "peekOfCode": "file_text = open(\"Codes/data.txt\",\"r\")\na = file_text.read()\nlist_a = []\nfor item in a.split(\",\"):\n    if int(item)%2 == 0:\n        list_a.append(int(item))\nfile_text_2 = open(\"Codes/netice.txt\",\"w\")\nfor item in list_a:\n    file_text_2.write(str(item)+\",\")\n# f = open(\"suallar_copy.txt\", \"r\")",
        "detail": "Codes.Lesson Subjects.Ders 5",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Codes.Lesson Subjects.Ders 5",
        "description": "Codes.Lesson Subjects.Ders 5",
        "peekOfCode": "a = file_text.read()\nlist_a = []\nfor item in a.split(\",\"):\n    if int(item)%2 == 0:\n        list_a.append(int(item))\nfile_text_2 = open(\"Codes/netice.txt\",\"w\")\nfor item in list_a:\n    file_text_2.write(str(item)+\",\")\n# f = open(\"suallar_copy.txt\", \"r\")\n# print(f.read())  # returns the entire contents of a file as one string",
        "detail": "Codes.Lesson Subjects.Ders 5",
        "documentation": {}
    },
    {
        "label": "list_a",
        "kind": 5,
        "importPath": "Codes.Lesson Subjects.Ders 5",
        "description": "Codes.Lesson Subjects.Ders 5",
        "peekOfCode": "list_a = []\nfor item in a.split(\",\"):\n    if int(item)%2 == 0:\n        list_a.append(int(item))\nfile_text_2 = open(\"Codes/netice.txt\",\"w\")\nfor item in list_a:\n    file_text_2.write(str(item)+\",\")\n# f = open(\"suallar_copy.txt\", \"r\")\n# print(f.read())  # returns the entire contents of a file as one string\n# for a in f:",
        "detail": "Codes.Lesson Subjects.Ders 5",
        "documentation": {}
    },
    {
        "label": "file_text_2",
        "kind": 5,
        "importPath": "Codes.Lesson Subjects.Ders 5",
        "description": "Codes.Lesson Subjects.Ders 5",
        "peekOfCode": "file_text_2 = open(\"Codes/netice.txt\",\"w\")\nfor item in list_a:\n    file_text_2.write(str(item)+\",\")\n# f = open(\"suallar_copy.txt\", \"r\")\n# print(f.read())  # returns the entire contents of a file as one string\n# for a in f:\n#     print(a)\n# f.write(\"pineapples\")\n# f.write(\"kiwis\")\n# for a in f:   ",
        "detail": "Codes.Lesson Subjects.Ders 5",
        "documentation": {}
    },
    {
        "label": "Human",
        "kind": 6,
        "importPath": "Codes.Lesson Subjects.Ders_4",
        "description": "Codes.Lesson Subjects.Ders_4",
        "peekOfCode": "class Human:\n    def __init__(self,name,last,age):\n        self.name = name\n        self.last = last\n        self.age = age\n    def yemek_yemek(self):\n        print(f\"{self.name} yemek yedi.\")\n    def yas_artmaq(self):\n        self.age = self.age + 1\n        print(f\"{self.name} yas artdi. yeni yas:{self.age}\")",
        "detail": "Codes.Lesson Subjects.Ders_4",
        "documentation": {}
    },
    {
        "label": "Hekim",
        "kind": 6,
        "importPath": "Codes.Lesson Subjects.Ders_4",
        "description": "Codes.Lesson Subjects.Ders_4",
        "peekOfCode": "class Hekim(Human): # inheritance # \n    def __init__(self,name,last, age):\n        super().__init__(name,last,age)\nclass Muellim(Human):\n    def __init__(self,name,last, age, academic_level):\n        super().__init__(name,last,age)\n        self.academic_level = academic_level\n    # Override\n    # Overloading \nos.system(\"clear\")",
        "detail": "Codes.Lesson Subjects.Ders_4",
        "documentation": {}
    },
    {
        "label": "Muellim",
        "kind": 6,
        "importPath": "Codes.Lesson Subjects.Ders_4",
        "description": "Codes.Lesson Subjects.Ders_4",
        "peekOfCode": "class Muellim(Human):\n    def __init__(self,name,last, age, academic_level):\n        super().__init__(name,last,age)\n        self.academic_level = academic_level\n    # Override\n    # Overloading \nos.system(\"clear\")\n# hekim_a = Hekim(\"Sebuhi\",\"Huseynov\", 24)\n# muellim_a = Muellim(\"Turan\",\"Dasdemirov\", 24,\"ProfessorDoktor\")\n# human = Human(\"Hasan\",\"Aliyev\",23)",
        "detail": "Codes.Lesson Subjects.Ders_4",
        "documentation": {}
    },
    {
        "label": "Person",
        "kind": 6,
        "importPath": "Codes.Lesson Subjects.Ders_4",
        "description": "Codes.Lesson Subjects.Ders_4",
        "peekOfCode": "class Person:\n    pass\ndef func():\n    pass",
        "detail": "Codes.Lesson Subjects.Ders_4",
        "documentation": {}
    },
    {
        "label": "say_hello",
        "kind": 2,
        "importPath": "Codes.Lesson Subjects.Ders_4",
        "description": "Codes.Lesson Subjects.Ders_4",
        "peekOfCode": "def say_hello(ad, prefix = \"insan\", ardicil_cumle = \"necesen. Ne var ne yox?\"):\n    print(f\"Salam {ad} {prefix}, {ardicil_cumle}\")\n# say_hello(\"Eli\", \"Adam\")\n# say_hello(ad=ad_1, prefix=\"bey\", ardicil_cumle=\"necesen menim qardasim?\")\n# say_hello(prefix=\"muellim\", ad=ad_2, ardicil_cumle=\"ders gecikirsen\")\n# say_hello(ad_3, \"usta\")\n# print(f\"Salam {ad_1}\")\n# say_hello()\n# say_hello()\n# say_hello()",
        "detail": "Codes.Lesson Subjects.Ders_4",
        "documentation": {}
    },
    {
        "label": "canculator",
        "kind": 2,
        "importPath": "Codes.Lesson Subjects.Ders_4",
        "description": "Codes.Lesson Subjects.Ders_4",
        "peekOfCode": "def canculator(number_1, number_2, operator):\n    if operator == \"+\":\n        return number_1 + number_2        \n    elif operator == \"-\":    \n        return number_1 - number_2\n    elif operator == \"*\":\n        return  number_1 * number_2\n    return number_1 / number_2\n# cem_1 = canculator(1, 2, \"+\") \n# cem_2 = canculator(3, 4, \"+\") ",
        "detail": "Codes.Lesson Subjects.Ders_4",
        "documentation": {}
    },
    {
        "label": "ucbucagin_novunu_ta",
        "kind": 2,
        "importPath": "Codes.Lesson Subjects.Ders_4",
        "description": "Codes.Lesson Subjects.Ders_4",
        "peekOfCode": "def ucbucagin_novunu_tap (a,b,c):\n    if a < 0 or b < 0 or c < 0:\n        return \"Bele bir ucbucaq yoxdur\"\n    if a == b == c == 60:\n        return \"Beraberyanli ucbucaqdir\"\n    if a + b < c: \n        return \"Korbucaqli ucbucaqdir\"\n# ucbucagin_novunu_tap(-20, 20, 80)\n# netice = ucbucagin_novunu_tap(-20, 20, 80)\n# if \"yoxdur\" in netice:",
        "detail": "Codes.Lesson Subjects.Ders_4",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "Codes.Lesson Subjects.Ders_4",
        "description": "Codes.Lesson Subjects.Ders_4",
        "peekOfCode": "def login(request):\n    username = request.get(\"username\")\n    password = request.get(\"password\")\n    if username is None or password is None:\n        return \"Username or Password are required\", 401\ndef f(x):\n    if x < 0:\n        return 0\n    if x > 100:\n        return 0",
        "detail": "Codes.Lesson Subjects.Ders_4",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "Codes.Lesson Subjects.Ders_4",
        "description": "Codes.Lesson Subjects.Ders_4",
        "peekOfCode": "def f(x):\n    if x < 0:\n        return 0\n    if x > 100:\n        return 0\n    print(x)\n# f(-3)\n# f(105)\n# f(64)\n#Funksiya hər şey return edə bilər",
        "detail": "Codes.Lesson Subjects.Ders_4",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "Codes.Lesson Subjects.Ders_4",
        "description": "Codes.Lesson Subjects.Ders_4",
        "peekOfCode": "def f():\n    return ['foo', 'bar', 'baz', 'qux']\n# x,*y, t = f()\n# print(y)\n# print(f())\n# print(f()[2])\n# print(f()[::-1])\n# Python dict as an argument\n# key word argument \ndef f(*args, **kwargs):",
        "detail": "Codes.Lesson Subjects.Ders_4",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "Codes.Lesson Subjects.Ders_4",
        "description": "Codes.Lesson Subjects.Ders_4",
        "peekOfCode": "def f(*args, **kwargs):\n    # print(kwargs)\n    # print(type(kwargs))\n    # for key, val in kwargs.items():\n    #         print(key, '->', val)\n    print(\"args: \",   args)\n    print(\"kwargs: \", kwargs)\n# argumentleri list kimi yollanilir\n# dictionary key and value\n# f(1,2,3,4,foo=1, bar=2, baz=3)",
        "detail": "Codes.Lesson Subjects.Ders_4",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "Codes.Lesson Subjects.Ders_4",
        "description": "Codes.Lesson Subjects.Ders_4",
        "peekOfCode": "def f(a, b, c):\n    print(F'a = {a}')\n    print(F'b = {b}')\n    print(F'c = {c}')\ndef func_a(a,b,x, d=10,e=20, *args, **kwargs):\n    print(\"Anonym\")\ndef e(a, b, *c, **kwargs):\n    print(F'a = {a}')\n    print(F'b = {b}')\n    print(F'c = {c}')",
        "detail": "Codes.Lesson Subjects.Ders_4",
        "documentation": {}
    },
    {
        "label": "func_a",
        "kind": 2,
        "importPath": "Codes.Lesson Subjects.Ders_4",
        "description": "Codes.Lesson Subjects.Ders_4",
        "peekOfCode": "def func_a(a,b,x, d=10,e=20, *args, **kwargs):\n    print(\"Anonym\")\ndef e(a, b, *c, **kwargs):\n    print(F'a = {a}')\n    print(F'b = {b}')\n    print(F'c = {c}')\nt = [1,2,3]\nd = {'a': 'foo', 'b': 25, 'c': 'qux'}\n# f(**d)\n# e(2,3,4,5)",
        "detail": "Codes.Lesson Subjects.Ders_4",
        "documentation": {}
    },
    {
        "label": "e",
        "kind": 2,
        "importPath": "Codes.Lesson Subjects.Ders_4",
        "description": "Codes.Lesson Subjects.Ders_4",
        "peekOfCode": "def e(a, b, *c, **kwargs):\n    print(F'a = {a}')\n    print(F'b = {b}')\n    print(F'c = {c}')\nt = [1,2,3]\nd = {'a': 'foo', 'b': 25, 'c': 'qux'}\n# f(**d)\n# e(2,3,4,5)\n# Hem *args hem *kwargs\n# \"\"\"",
        "detail": "Codes.Lesson Subjects.Ders_4",
        "documentation": {}
    },
    {
        "label": "concat",
        "kind": 2,
        "importPath": "Codes.Lesson Subjects.Ders_4",
        "description": "Codes.Lesson Subjects.Ders_4",
        "peekOfCode": "def concat(prefix, *args):\n    print(f'{prefix}  {f\"{prefix}\".join(args)}')\nconcat('//', 'a', 'b', 'c')\nconcat('...', 'foo', 'bar', 'baz', 'qux')\n# Canculyator funksiyasi yazin\n#! Docstring\n# Instagran user passowrd\n# from curses import longname\n# user_password = \"Bakugan612\"",
        "detail": "Codes.Lesson Subjects.Ders_4",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "Codes.Lesson Subjects.Ders_4",
        "description": "Codes.Lesson Subjects.Ders_4",
        "peekOfCode": "def login(username:str, password:str, age:int) -> bool:\n    \"\"\"Bu funksiya instarame giris ucundur\n    Args:\n        username (str): istifadecinin instagram  istifadeci adi\n        password (str): intifadecinin instagram sifresi\n        age (int): istifadecinin yasi\n    Returns:\n        bool: neticeniin true ve ya false olaraq return edir \n    \"\"\"\n    if age>18:",
        "detail": "Codes.Lesson Subjects.Ders_4",
        "documentation": {}
    },
    {
        "label": "func",
        "kind": 2,
        "importPath": "Codes.Lesson Subjects.Ders_4",
        "description": "Codes.Lesson Subjects.Ders_4",
        "peekOfCode": "def func():\n    pass",
        "detail": "Codes.Lesson Subjects.Ders_4",
        "documentation": {}
    },
    {
        "label": "ad_1",
        "kind": 5,
        "importPath": "Codes.Lesson Subjects.Ders_4",
        "description": "Codes.Lesson Subjects.Ders_4",
        "peekOfCode": "ad_1 = \"Hesen\"\nad_2 = \"Ali\"\nad_3 = \"Mamed\"\nad_4 = \"Arif\"\n# print\n# print(teta)\n# teta(\"Hesen Molladi\")\n# print(f\"Salam {ad_2}, necesen?\")\n# print(f\"Salam {ad_3}, necesen?\")\n# print(f\"Salam {ad_4}, necesen?\")",
        "detail": "Codes.Lesson Subjects.Ders_4",
        "documentation": {}
    },
    {
        "label": "ad_2",
        "kind": 5,
        "importPath": "Codes.Lesson Subjects.Ders_4",
        "description": "Codes.Lesson Subjects.Ders_4",
        "peekOfCode": "ad_2 = \"Ali\"\nad_3 = \"Mamed\"\nad_4 = \"Arif\"\n# print\n# print(teta)\n# teta(\"Hesen Molladi\")\n# print(f\"Salam {ad_2}, necesen?\")\n# print(f\"Salam {ad_3}, necesen?\")\n# print(f\"Salam {ad_4}, necesen?\")\n# def snake_case(arg_1, arg_2 = \" Tural\"):",
        "detail": "Codes.Lesson Subjects.Ders_4",
        "documentation": {}
    },
    {
        "label": "ad_3",
        "kind": 5,
        "importPath": "Codes.Lesson Subjects.Ders_4",
        "description": "Codes.Lesson Subjects.Ders_4",
        "peekOfCode": "ad_3 = \"Mamed\"\nad_4 = \"Arif\"\n# print\n# print(teta)\n# teta(\"Hesen Molladi\")\n# print(f\"Salam {ad_2}, necesen?\")\n# print(f\"Salam {ad_3}, necesen?\")\n# print(f\"Salam {ad_4}, necesen?\")\n# def snake_case(arg_1, arg_2 = \" Tural\"):\n#     print(str(arg_1) + arg_2)",
        "detail": "Codes.Lesson Subjects.Ders_4",
        "documentation": {}
    },
    {
        "label": "ad_4",
        "kind": 5,
        "importPath": "Codes.Lesson Subjects.Ders_4",
        "description": "Codes.Lesson Subjects.Ders_4",
        "peekOfCode": "ad_4 = \"Arif\"\n# print\n# print(teta)\n# teta(\"Hesen Molladi\")\n# print(f\"Salam {ad_2}, necesen?\")\n# print(f\"Salam {ad_3}, necesen?\")\n# print(f\"Salam {ad_4}, necesen?\")\n# def snake_case(arg_1, arg_2 = \" Tural\"):\n#     print(str(arg_1) + arg_2)\n# snake_case(\"Salam Necesen\")",
        "detail": "Codes.Lesson Subjects.Ders_4",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "Codes.Lesson Subjects.Ders_4",
        "description": "Codes.Lesson Subjects.Ders_4",
        "peekOfCode": "t = [1,2,3]\nd = {'a': 'foo', 'b': 25, 'c': 'qux'}\n# f(**d)\n# e(2,3,4,5)\n# Hem *args hem *kwargs\n# \"\"\"\n# >>> def f(a, b, *args, **kwargs):\n# ...     print(F'a = {a}')\n# ...     print(F'b = {b}')\n# ...     print(F'args = {args}')",
        "detail": "Codes.Lesson Subjects.Ders_4",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "Codes.Lesson Subjects.Ders_4",
        "description": "Codes.Lesson Subjects.Ders_4",
        "peekOfCode": "d = {'a': 'foo', 'b': 25, 'c': 'qux'}\n# f(**d)\n# e(2,3,4,5)\n# Hem *args hem *kwargs\n# \"\"\"\n# >>> def f(a, b, *args, **kwargs):\n# ...     print(F'a = {a}')\n# ...     print(F'b = {b}')\n# ...     print(F'args = {args}')\n# ...     print(F'kwargs = {kwargs}')",
        "detail": "Codes.Lesson Subjects.Ders_4",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "Codes.Lesson Subjects.Ders_pandas",
        "description": "Codes.Lesson Subjects.Ders_pandas",
        "peekOfCode": "df = pd.read_csv('Codes/Lesson Subjects/users.csv')\nprint(df) \n# pd.options.display.max_rows = 100\n# pd.set_option('display.max_rows', x)\n# pd.options.display.min_rows = 20\n# print(df) \n#! get.options to return the current value\n# print(pd.get_option(\"display.min_rows\"))\n#! Read json\n# df = pd.read_json('Codes/Lesson Subjects/data.json')",
        "detail": "Codes.Lesson Subjects.Ders_pandas",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "Codes.Lesson Subjects.Ders_requests",
        "description": "Codes.Lesson Subjects.Ders_requests",
        "peekOfCode": "b = a + 20\nresponse =  requests.get('https://api.github.com')\nprint(response)",
        "detail": "Codes.Lesson Subjects.Ders_requests",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "Codes.Lesson Subjects.Ders_requests",
        "description": "Codes.Lesson Subjects.Ders_requests",
        "peekOfCode": "response =  requests.get('https://api.github.com')\nprint(response)",
        "detail": "Codes.Lesson Subjects.Ders_requests",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Codes.Lesson Subjects.ders_numpy",
        "description": "Codes.Lesson Subjects.ders_numpy",
        "peekOfCode": "a = np.array([1, 2, 3, 4, 5, 1, 2, 3, 4, 5])\nb = a[1:5]  # b, a'nın bir görünümüdür\nc = b[1:2]\n# b[2] = 10\n# print(b.base)\n# print(a)\n# print(b.base is a)  \n# print(c.base is a)  \n#! Arrayleri sütuna uyğun birlesdirmek\n# [1, 2, 3]  [4, 5, 6]  [7, 8, 9]",
        "detail": "Codes.Lesson Subjects.ders_numpy",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "Codes.Lesson Subjects.ders_numpy",
        "description": "Codes.Lesson Subjects.ders_numpy",
        "peekOfCode": "b = a[1:5]  # b, a'nın bir görünümüdür\nc = b[1:2]\n# b[2] = 10\n# print(b.base)\n# print(a)\n# print(b.base is a)  \n# print(c.base is a)  \n#! Arrayleri sütuna uyğun birlesdirmek\n# [1, 2, 3]  [4, 5, 6]  [7, 8, 9]\n# arr1 = np.array([1, 2, 3])",
        "detail": "Codes.Lesson Subjects.ders_numpy",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "Codes.Lesson Subjects.ders_numpy",
        "description": "Codes.Lesson Subjects.ders_numpy",
        "peekOfCode": "c = b[1:2]\n# b[2] = 10\n# print(b.base)\n# print(a)\n# print(b.base is a)  \n# print(c.base is a)  \n#! Arrayleri sütuna uyğun birlesdirmek\n# [1, 2, 3]  [4, 5, 6]  [7, 8, 9]\n# arr1 = np.array([1, 2, 3])\n# arr2 = np.array([4, 5, 6])",
        "detail": "Codes.Lesson Subjects.ders_numpy",
        "documentation": {}
    },
    {
        "label": "arr1",
        "kind": 5,
        "importPath": "Codes.Lesson Subjects.ders_numpy",
        "description": "Codes.Lesson Subjects.ders_numpy",
        "peekOfCode": "arr1 = np.array([[1, 2],[3,4]])\narr2 = np.array([[4, 5], [6,7]])\narr = np.concatenate((arr1, arr2), axis = 1)\nprint(arr)\n# [1 2 3 4 5 6]\n# axis - 0 sətir boyunca birləşdirmə yəni dik birləşdirmə\n# axis - 1 sütun boyunca birləşdirmə yəni üfüqi birləşdirmə\n# 1 2     5  6  3 4     7  8 \n# arr1 = np.array([[1, 2], [3, 4]])\n# arr2 = np.array([[5, 6], [7, 8]])",
        "detail": "Codes.Lesson Subjects.ders_numpy",
        "documentation": {}
    },
    {
        "label": "arr2",
        "kind": 5,
        "importPath": "Codes.Lesson Subjects.ders_numpy",
        "description": "Codes.Lesson Subjects.ders_numpy",
        "peekOfCode": "arr2 = np.array([[4, 5], [6,7]])\narr = np.concatenate((arr1, arr2), axis = 1)\nprint(arr)\n# [1 2 3 4 5 6]\n# axis - 0 sətir boyunca birləşdirmə yəni dik birləşdirmə\n# axis - 1 sütun boyunca birləşdirmə yəni üfüqi birləşdirmə\n# 1 2     5  6  3 4     7  8 \n# arr1 = np.array([[1, 2], [3, 4]])\n# arr2 = np.array([[5, 6], [7, 8]])\n# arr = np.concatenate((arr1, arr2), axis=1)",
        "detail": "Codes.Lesson Subjects.ders_numpy",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "Codes.Lesson Subjects.ders_numpy",
        "description": "Codes.Lesson Subjects.ders_numpy",
        "peekOfCode": "arr = np.concatenate((arr1, arr2), axis = 1)\nprint(arr)\n# [1 2 3 4 5 6]\n# axis - 0 sətir boyunca birləşdirmə yəni dik birləşdirmə\n# axis - 1 sütun boyunca birləşdirmə yəni üfüqi birləşdirmə\n# 1 2     5  6  3 4     7  8 \n# arr1 = np.array([[1, 2], [3, 4]])\n# arr2 = np.array([[5, 6], [7, 8]])\n# arr = np.concatenate((arr1, arr2), axis=1)\n# print(arr)",
        "detail": "Codes.Lesson Subjects.ders_numpy",
        "documentation": {}
    },
    {
        "label": "array",
        "kind": 5,
        "importPath": "Codes.Others.numpy_examples.numpy_arange",
        "description": "Codes.Others.numpy_examples.numpy_arange",
        "peekOfCode": "array = np.arange(30, 71)\n# Printing a message indicating an array of integers from 30 to 70\nprint(\"Array of the integers from 30 to 70\")\n# Printing the array of integers from 30 to 70\nprint(array)",
        "detail": "Codes.Others.numpy_examples.numpy_arange",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Codes.Others.numpy_examples.numpy_complex",
        "description": "Codes.Others.numpy_examples.numpy_complex",
        "peekOfCode": "a = np.array([1+1j, 1+0j, 4.5, 3, 2, 2j])\n# Printing the original array 'a'\nprint(\"Original array\")\nprint(a)\n# Checking the given array 'a' element-wise for complex numbers and printing the result\nprint(\"Checking for complex number:\")\nprint(np.iscomplex(a))\n# Checking the given array 'a' element-wise for real numbers and printing the result\nprint(\"Checking for real number:\")\nprint(np.isreal(a))",
        "detail": "Codes.Others.numpy_examples.numpy_complex",
        "documentation": {}
    },
    {
        "label": "array",
        "kind": 5,
        "importPath": "Codes.Others.numpy_examples.numpy_ones",
        "description": "Codes.Others.numpy_examples.numpy_ones",
        "peekOfCode": "array = np.zeros(10)\n# Printing a message indicating an array of 10 zeros\nprint(\"An array of 10 zeros:\")\n# Printing the array of 10 zeros\nprint(array)\n# Creating an array of 10 ones using np.ones()\narray = np.ones(10)\n# Printing a message indicating an array of 10 ones\nprint(\"An array of 10 ones:\")\n# Printing the array of 10 ones",
        "detail": "Codes.Others.numpy_examples.numpy_ones",
        "documentation": {}
    },
    {
        "label": "array",
        "kind": 5,
        "importPath": "Codes.Others.numpy_examples.numpy_ones",
        "description": "Codes.Others.numpy_examples.numpy_ones",
        "peekOfCode": "array = np.ones(10)\n# Printing a message indicating an array of 10 ones\nprint(\"An array of 10 ones:\")\n# Printing the array of 10 ones\nprint(array)\n# Creating an array of 10 fives by multiplying an array of 10 ones by 5\narray = np.ones(10) * 5\n# Printing a message indicating an array of 10 fives\nprint(\"An array of 10 fives:\")\n# Printing the array of 10 fives",
        "detail": "Codes.Others.numpy_examples.numpy_ones",
        "documentation": {}
    },
    {
        "label": "array",
        "kind": 5,
        "importPath": "Codes.Others.numpy_examples.numpy_ones",
        "description": "Codes.Others.numpy_examples.numpy_ones",
        "peekOfCode": "array = np.ones(10) * 5\n# Printing a message indicating an array of 10 fives\nprint(\"An array of 10 fives:\")\n# Printing the array of 10 fives\nprint(array) \n#! Interesting \n# # Importing the NumPy library with an alias 'np'\n# import numpy as np\n# # Creating a 10x10 matrix filled with ones using np.ones()\n# x = np.ones((10, 10))",
        "detail": "Codes.Others.numpy_examples.numpy_ones",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Codes.Others.numpy_examples.numpy_save",
        "description": "Codes.Others.numpy_examples.numpy_save",
        "peekOfCode": "a = np.arange(20)\n# Saving the NumPy array 'a' as a file named 'temp_arra.npy' using np.save()\nnp.save('temp_arra.npy', a)\n# Printing a message checking if the file 'temp_arra.npy' exists or not\nprint(\"Check if 'temp_arra.npy' exists or not?\")\n# Checking if the file 'temp_arra.npy' exists using os.path.exists()\nif os.path.exists('temp_arra.npy'):\n    # Loading the data from 'temp_arra.npy' into 'x2' using np.load()\n    x2 = np.load('temp_arra.npy')\n    # Checking if the loaded array 'x2' is equal to the original array 'a' using np.array_equal()",
        "detail": "Codes.Others.numpy_examples.numpy_save",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": "Codes.Others.numpy_examples.numpy_sort",
        "description": "Codes.Others.numpy_examples.numpy_sort",
        "peekOfCode": "nums = np.array([[5.54, 3.38, 7.99],\n              [3.54, 4.38, 6.99],\n              [1.54, 2.39, 9.29]])\n# Printing a message indicating the original array\nprint(\"Original array:\")\nprint(nums)\n# Sorting the array 'nums' by rows in ascending order and displaying the sorted result\nprint(\"\\nSort the said array by row in ascending order:\")\nprint(np.sort(nums))\n# Sorting the array 'nums' by columns in ascending order and displaying the sorted result",
        "detail": "Codes.Others.numpy_examples.numpy_sort",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "Codes.Others.numpy_examples.numpy_sum",
        "description": "Codes.Others.numpy_examples.numpy_sum",
        "peekOfCode": "x = np.array([[0, 1], [2, 3]])\n# Printing a message indicating the original array 'x'\nprint(\"Original array:\")\nprint(x)\n# Calculating and printing the sum of all elements in the array 'x' using np.sum()\nprint(\"Sum of all elements:\")\nprint(np.sum(x))\n# Calculating and printing the sum of each column in the array 'x' using np.sum() with axis=0\nprint(\"Sum of each column:\")\nprint(np.sum(x, axis=0))",
        "detail": "Codes.Others.numpy_examples.numpy_sum",
        "documentation": {}
    },
    {
        "label": "salam_ver",
        "kind": 2,
        "importPath": "Codes.run_copy",
        "description": "Codes.run_copy",
        "peekOfCode": "def salam_ver(name):\n    print(f\"Salam {name}!\")",
        "detail": "Codes.run_copy",
        "documentation": {}
    }
]