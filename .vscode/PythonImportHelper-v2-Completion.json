[
    {
        "label": "module_1",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "module_1",
        "description": "module_1",
        "detail": "module_1",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "pprint",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "random",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "cemini_tap",
        "kind": 2,
        "importPath": "Codes.Lesson Subjects.ModuleExample.module_1",
        "description": "Codes.Lesson Subjects.ModuleExample.module_1",
        "peekOfCode": "def cemini_tap(x, y):\n    return x + y\ndef hasili_tap(x, y):\n    return x * y\n# Bankomatlarin isleme sistemi \nuserler = {\n    {\n        \"name\": \"Hasan\",\n        \"surname\": \"Hesenov\",\n        \"bank_card_code\": 40986793,",
        "detail": "Codes.Lesson Subjects.ModuleExample.module_1",
        "documentation": {}
    },
    {
        "label": "hasili_tap",
        "kind": 2,
        "importPath": "Codes.Lesson Subjects.ModuleExample.module_1",
        "description": "Codes.Lesson Subjects.ModuleExample.module_1",
        "peekOfCode": "def hasili_tap(x, y):\n    return x * y\n# Bankomatlarin isleme sistemi \nuserler = {\n    {\n        \"name\": \"Hasan\",\n        \"surname\": \"Hesenov\",\n        \"bank_card_code\": 40986793,\n        \"bank_card_csv\":123,\n        \"password\":1243,",
        "detail": "Codes.Lesson Subjects.ModuleExample.module_1",
        "documentation": {}
    },
    {
        "label": "userler",
        "kind": 5,
        "importPath": "Codes.Lesson Subjects.ModuleExample.module_1",
        "description": "Codes.Lesson Subjects.ModuleExample.module_1",
        "peekOfCode": "userler = {\n    {\n        \"name\": \"Hasan\",\n        \"surname\": \"Hesenov\",\n        \"bank_card_code\": 40986793,\n        \"bank_card_csv\":123,\n        \"password\":1243,\n        \"balance\": 23.2\n    },\n    {",
        "detail": "Codes.Lesson Subjects.ModuleExample.module_1",
        "documentation": {}
    },
    {
        "label": "cem",
        "kind": 5,
        "importPath": "Codes.Lesson Subjects.ModuleExample.module_2",
        "description": "Codes.Lesson Subjects.ModuleExample.module_2",
        "peekOfCode": "cem = module_1.cemini_tap(10,20)\nprint(sqrt(cem))\nhasil = module_1.hasili_tap(10,20)\nprint(hasil)\n# from datetime import datetime\n# import time \n# time_1 = datetime.now()\n# for a in range(5):\n#     time.sleep(1)\n#     print(a)",
        "detail": "Codes.Lesson Subjects.ModuleExample.module_2",
        "documentation": {}
    },
    {
        "label": "hasil",
        "kind": 5,
        "importPath": "Codes.Lesson Subjects.ModuleExample.module_2",
        "description": "Codes.Lesson Subjects.ModuleExample.module_2",
        "peekOfCode": "hasil = module_1.hasili_tap(10,20)\nprint(hasil)\n# from datetime import datetime\n# import time \n# time_1 = datetime.now()\n# for a in range(5):\n#     time.sleep(1)\n#     print(a)\n# time_2 = datetime.now()\n# difference = time_2 - time_1",
        "detail": "Codes.Lesson Subjects.ModuleExample.module_2",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "Codes.Lesson Subjects.Ders 1",
        "description": "Codes.Lesson Subjects.Ders 1",
        "peekOfCode": "x = 1.1 + 2.2\n# print(x)\n# print(x == 3.3)\n# from math import isclose\n# print(  isclose(6,10, rel_tol=0.2)  )\n# x = 1.1 + 2.2\n# print( isclose(x,3.3))\n# x y arasindaki ferq 20 faizden den cox deyilse bunlari beraber kimi qebul et\n# print( isclose(6, 7, rel_tol=0.2))\n#! Boolean cheking ",
        "detail": "Codes.Lesson Subjects.Ders 1",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "Codes.Lesson Subjects.Ders 2",
        "description": "Codes.Lesson Subjects.Ders 2",
        "peekOfCode": "x = 1    # int  # integer \ny = 2.8  # float  \nz = 1j   # complex\na = \"salam\" # string \nb = True # boolean\nc = None # Nonetype\n# a = 20\n# b = 2.4\n# c = 30\n# d = None",
        "detail": "Codes.Lesson Subjects.Ders 2",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "Codes.Lesson Subjects.Ders 2",
        "description": "Codes.Lesson Subjects.Ders 2",
        "peekOfCode": "y = 2.8  # float  \nz = 1j   # complex\na = \"salam\" # string \nb = True # boolean\nc = None # Nonetype\n# a = 20\n# b = 2.4\n# c = 30\n# d = None\n# print(a<d)",
        "detail": "Codes.Lesson Subjects.Ders 2",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "Codes.Lesson Subjects.Ders 2",
        "description": "Codes.Lesson Subjects.Ders 2",
        "peekOfCode": "z = 1j   # complex\na = \"salam\" # string \nb = True # boolean\nc = None # Nonetype\n# a = 20\n# b = 2.4\n# c = 30\n# d = None\n# print(a<d)\n#convert from int to float:",
        "detail": "Codes.Lesson Subjects.Ders 2",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Codes.Lesson Subjects.Ders 2",
        "description": "Codes.Lesson Subjects.Ders 2",
        "peekOfCode": "a = \"salam\" # string \nb = True # boolean\nc = None # Nonetype\n# a = 20\n# b = 2.4\n# c = 30\n# d = None\n# print(a<d)\n#convert from int to float:\n# x = \"100\"",
        "detail": "Codes.Lesson Subjects.Ders 2",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "Codes.Lesson Subjects.Ders 2",
        "description": "Codes.Lesson Subjects.Ders 2",
        "peekOfCode": "b = True # boolean\nc = None # Nonetype\n# a = 20\n# b = 2.4\n# c = 30\n# d = None\n# print(a<d)\n#convert from int to float:\n# x = \"100\"\n# x = int(x)",
        "detail": "Codes.Lesson Subjects.Ders 2",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "Codes.Lesson Subjects.Ders 2",
        "description": "Codes.Lesson Subjects.Ders 2",
        "peekOfCode": "c = None # Nonetype\n# a = 20\n# b = 2.4\n# c = 30\n# d = None\n# print(a<d)\n#convert from int to float:\n# x = \"100\"\n# x = int(x)\n# print(type(x))",
        "detail": "Codes.Lesson Subjects.Ders 2",
        "documentation": {}
    },
    {
        "label": "var_b",
        "kind": 5,
        "importPath": "Codes.Lesson Subjects.Ders 2",
        "description": "Codes.Lesson Subjects.Ders 2",
        "peekOfCode": "var_b =  [\"salam\", \"necesen\", \"neynirsen\"]\nprint(var_b[-3])\nprint(var_b[2])\n# print(type(var_a))\n# var_a = [1, 2, 3, 4, 5]\n# var_b = [2,4,5,6,8]\n# print(var_a)\n# print(type(var_a))\n# print(len(var_a))\n# print( var_a[-5] )",
        "detail": "Codes.Lesson Subjects.Ders 2",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "Codes.Lesson Subjects.Ders 3",
        "description": "Codes.Lesson Subjects.Ders 3",
        "peekOfCode": "txt = \"The best things in life are Free!\"\n# new_txt = txt.\n# print(new_txt)\n# list_a = [\"Farid\", \"Mahammad\",\"Muhammad\",\"Nicat\"]\n# new_text = \",\".join(list_a)\n# print(new_text)\n# print(txt.find(\"in\",12))\n# print(txt.upper().count(\"F\"))\n#*upper\n#*lower",
        "detail": "Codes.Lesson Subjects.Ders 3",
        "documentation": {}
    },
    {
        "label": "child1",
        "kind": 5,
        "importPath": "Codes.Lesson Subjects.Ders 3",
        "description": "Codes.Lesson Subjects.Ders 3",
        "peekOfCode": "child1 = {\n  \"name\" : \"Emil\",\n  \"year\" : 2004\n}\nchild2 = {\n  \"name\" : \"Tobias\",\n  \"year\" : 2007\n}\nchild3 = {\n  \"name\" : \"Linus\",",
        "detail": "Codes.Lesson Subjects.Ders 3",
        "documentation": {}
    },
    {
        "label": "child2",
        "kind": 5,
        "importPath": "Codes.Lesson Subjects.Ders 3",
        "description": "Codes.Lesson Subjects.Ders 3",
        "peekOfCode": "child2 = {\n  \"name\" : \"Tobias\",\n  \"year\" : 2007\n}\nchild3 = {\n  \"name\" : \"Linus\",\n  \"year\" : 2011,\n}\nmyfamily = {\n  \"child1\" : child1,",
        "detail": "Codes.Lesson Subjects.Ders 3",
        "documentation": {}
    },
    {
        "label": "child3",
        "kind": 5,
        "importPath": "Codes.Lesson Subjects.Ders 3",
        "description": "Codes.Lesson Subjects.Ders 3",
        "peekOfCode": "child3 = {\n  \"name\" : \"Linus\",\n  \"year\" : 2011,\n}\nmyfamily = {\n  \"child1\" : child1,\n  \"child2\" : child2,\n  \"child3\" : child3\n}\nprint(child2['name'])",
        "detail": "Codes.Lesson Subjects.Ders 3",
        "documentation": {}
    },
    {
        "label": "myfamily",
        "kind": 5,
        "importPath": "Codes.Lesson Subjects.Ders 3",
        "description": "Codes.Lesson Subjects.Ders 3",
        "peekOfCode": "myfamily = {\n  \"child1\" : child1,\n  \"child2\" : child2,\n  \"child3\" : child3\n}\nprint(child2['name'])\n# x = ('key1', 'key2', 'key3')\n# thisdict{\n#   ke\n# }",
        "detail": "Codes.Lesson Subjects.Ders 3",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "Codes.Lesson Subjects.Ders 4",
        "description": "Codes.Lesson Subjects.Ders 4",
        "peekOfCode": "x = lambda a : a + 10\nuce_vur = lambda x : 1 if x== 0 else x* uce_vur(x-1)\n# def uce_vur(a):\n#     return  a*3\n# print(uce_vur(5))\n# print(x(5))\n# def func(a):\n#     return  a + 10",
        "detail": "Codes.Lesson Subjects.Ders 4",
        "documentation": {}
    },
    {
        "label": "uce_vur",
        "kind": 5,
        "importPath": "Codes.Lesson Subjects.Ders 4",
        "description": "Codes.Lesson Subjects.Ders 4",
        "peekOfCode": "uce_vur = lambda x : 1 if x== 0 else x* uce_vur(x-1)\n# def uce_vur(a):\n#     return  a*3\n# print(uce_vur(5))\n# print(x(5))\n# def func(a):\n#     return  a + 10\n# func = lambda a, y: a * y",
        "detail": "Codes.Lesson Subjects.Ders 4",
        "documentation": {}
    },
    {
        "label": "Human",
        "kind": 6,
        "importPath": "Codes.Lesson Subjects.Ders 4_1",
        "description": "Codes.Lesson Subjects.Ders 4_1",
        "peekOfCode": "class Human:\n    def __init__(self,name,last,age):\n        self.name = name\n        self.last = last\n        self.age = age\n    def yemek_yemek(self):\n        print(f\"{self.name} yemek yedi.\")\n    def yas_artmaq(self):\n        self.age = self.age + 1\n        print(f\"{self.name} yas artdi. yeni yas:{self.age}\")",
        "detail": "Codes.Lesson Subjects.Ders 4_1",
        "documentation": {}
    },
    {
        "label": "Hekim",
        "kind": 6,
        "importPath": "Codes.Lesson Subjects.Ders 4_1",
        "description": "Codes.Lesson Subjects.Ders 4_1",
        "peekOfCode": "class Hekim(Human):\n    def __init__(self,name,last, age):\n        super().__init__(name,last,age)\nclass Muellim(Human):\n    def __init__(self,name,last, age, academic_level):\n        super().__init__(name,last,age)\n        self.academic_level = academic_level\n    def get_def(self,deyisgen):\n        return self.name + \" \" + self.last + \" \" + self.academic_level\n    # Override",
        "detail": "Codes.Lesson Subjects.Ders 4_1",
        "documentation": {}
    },
    {
        "label": "Muellim",
        "kind": 6,
        "importPath": "Codes.Lesson Subjects.Ders 4_1",
        "description": "Codes.Lesson Subjects.Ders 4_1",
        "peekOfCode": "class Muellim(Human):\n    def __init__(self,name,last, age, academic_level):\n        super().__init__(name,last,age)\n        self.academic_level = academic_level\n    def get_def(self,deyisgen):\n        return self.name + \" \" + self.last + \" \" + self.academic_level\n    # Override\n    # Overloading \nhekim_a = Hekim(\"Ali\",\"Sahib\", 24)\nmuellim_a = Muellim(\"Ali\",\"Sahib\", 24,\"ProfessorDoktor\")",
        "detail": "Codes.Lesson Subjects.Ders 4_1",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "Codes.Lesson Subjects.Ders 4_1",
        "description": "Codes.Lesson Subjects.Ders 4_1",
        "peekOfCode": "x = lambda a : a + 10\nuce_vur = lambda x : 1 if x== 0 else x* uce_vur(x-1)\n# def uce_vur(a):\n#     return  a*3\n# print(uce_vur(5))\n# print(x(5))\n# def func(a):\n#     return  a + 10",
        "detail": "Codes.Lesson Subjects.Ders 4_1",
        "documentation": {}
    },
    {
        "label": "uce_vur",
        "kind": 5,
        "importPath": "Codes.Lesson Subjects.Ders 4_1",
        "description": "Codes.Lesson Subjects.Ders 4_1",
        "peekOfCode": "uce_vur = lambda x : 1 if x== 0 else x* uce_vur(x-1)\n# def uce_vur(a):\n#     return  a*3\n# print(uce_vur(5))\n# print(x(5))\n# def func(a):\n#     return  a + 10\n# func = lambda a, y: a * y",
        "detail": "Codes.Lesson Subjects.Ders 4_1",
        "documentation": {}
    },
    {
        "label": "hekim_a",
        "kind": 5,
        "importPath": "Codes.Lesson Subjects.Ders 4_1",
        "description": "Codes.Lesson Subjects.Ders 4_1",
        "peekOfCode": "hekim_a = Hekim(\"Ali\",\"Sahib\", 24)\nmuellim_a = Muellim(\"Ali\",\"Sahib\", 24,\"ProfessorDoktor\")\nprint(hekim_a)     \nprint(muellim_a)",
        "detail": "Codes.Lesson Subjects.Ders 4_1",
        "documentation": {}
    },
    {
        "label": "muellim_a",
        "kind": 5,
        "importPath": "Codes.Lesson Subjects.Ders 4_1",
        "description": "Codes.Lesson Subjects.Ders 4_1",
        "peekOfCode": "muellim_a = Muellim(\"Ali\",\"Sahib\", 24,\"ProfessorDoktor\")\nprint(hekim_a)     \nprint(muellim_a)",
        "detail": "Codes.Lesson Subjects.Ders 4_1",
        "documentation": {}
    },
    {
        "label": "file_text",
        "kind": 5,
        "importPath": "Codes.Lesson Subjects.Ders 5",
        "description": "Codes.Lesson Subjects.Ders 5",
        "peekOfCode": "file_text = open(\"Codes/data.txt\",\"r\")\na = file_text.read()\nlist_a = []\nfor item in a.split(\",\"):\n    if int(item)%2 == 0:\n        list_a.append(int(item))\nfile_text_2 = open(\"Codes/netice.txt\",\"w\")\nfor item in list_a:\n    file_text_2.write(str(item)+\",\")\n# f = open(\"suallar_copy.txt\", \"r\")",
        "detail": "Codes.Lesson Subjects.Ders 5",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Codes.Lesson Subjects.Ders 5",
        "description": "Codes.Lesson Subjects.Ders 5",
        "peekOfCode": "a = file_text.read()\nlist_a = []\nfor item in a.split(\",\"):\n    if int(item)%2 == 0:\n        list_a.append(int(item))\nfile_text_2 = open(\"Codes/netice.txt\",\"w\")\nfor item in list_a:\n    file_text_2.write(str(item)+\",\")\n# f = open(\"suallar_copy.txt\", \"r\")\n# print(f.read())  # returns the entire contents of a file as one string",
        "detail": "Codes.Lesson Subjects.Ders 5",
        "documentation": {}
    },
    {
        "label": "list_a",
        "kind": 5,
        "importPath": "Codes.Lesson Subjects.Ders 5",
        "description": "Codes.Lesson Subjects.Ders 5",
        "peekOfCode": "list_a = []\nfor item in a.split(\",\"):\n    if int(item)%2 == 0:\n        list_a.append(int(item))\nfile_text_2 = open(\"Codes/netice.txt\",\"w\")\nfor item in list_a:\n    file_text_2.write(str(item)+\",\")\n# f = open(\"suallar_copy.txt\", \"r\")\n# print(f.read())  # returns the entire contents of a file as one string\n# for a in f:",
        "detail": "Codes.Lesson Subjects.Ders 5",
        "documentation": {}
    },
    {
        "label": "file_text_2",
        "kind": 5,
        "importPath": "Codes.Lesson Subjects.Ders 5",
        "description": "Codes.Lesson Subjects.Ders 5",
        "peekOfCode": "file_text_2 = open(\"Codes/netice.txt\",\"w\")\nfor item in list_a:\n    file_text_2.write(str(item)+\",\")\n# f = open(\"suallar_copy.txt\", \"r\")\n# print(f.read())  # returns the entire contents of a file as one string\n# for a in f:\n#     print(a)\n# f.write(\"pineapples\")\n# f.write(\"kiwis\")\n# for a in f:   ",
        "detail": "Codes.Lesson Subjects.Ders 5",
        "documentation": {}
    },
    {
        "label": "array",
        "kind": 5,
        "importPath": "Codes.numpy_examples.numpy_arange",
        "description": "Codes.numpy_examples.numpy_arange",
        "peekOfCode": "array = np.arange(30, 71)\n# Printing a message indicating an array of integers from 30 to 70\nprint(\"Array of the integers from 30 to 70\")\n# Printing the array of integers from 30 to 70\nprint(array)",
        "detail": "Codes.numpy_examples.numpy_arange",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Codes.numpy_examples.numpy_complex",
        "description": "Codes.numpy_examples.numpy_complex",
        "peekOfCode": "a = np.array([1+1j, 1+0j, 4.5, 3, 2, 2j])\n# Printing the original array 'a'\nprint(\"Original array\")\nprint(a)\n# Checking the given array 'a' element-wise for complex numbers and printing the result\nprint(\"Checking for complex number:\")\nprint(np.iscomplex(a))\n# Checking the given array 'a' element-wise for real numbers and printing the result\nprint(\"Checking for real number:\")\nprint(np.isreal(a))",
        "detail": "Codes.numpy_examples.numpy_complex",
        "documentation": {}
    },
    {
        "label": "array",
        "kind": 5,
        "importPath": "Codes.numpy_examples.numpy_ones",
        "description": "Codes.numpy_examples.numpy_ones",
        "peekOfCode": "array = np.zeros(10)\n# Printing a message indicating an array of 10 zeros\nprint(\"An array of 10 zeros:\")\n# Printing the array of 10 zeros\nprint(array)\n# Creating an array of 10 ones using np.ones()\narray = np.ones(10)\n# Printing a message indicating an array of 10 ones\nprint(\"An array of 10 ones:\")\n# Printing the array of 10 ones",
        "detail": "Codes.numpy_examples.numpy_ones",
        "documentation": {}
    },
    {
        "label": "array",
        "kind": 5,
        "importPath": "Codes.numpy_examples.numpy_ones",
        "description": "Codes.numpy_examples.numpy_ones",
        "peekOfCode": "array = np.ones(10)\n# Printing a message indicating an array of 10 ones\nprint(\"An array of 10 ones:\")\n# Printing the array of 10 ones\nprint(array)\n# Creating an array of 10 fives by multiplying an array of 10 ones by 5\narray = np.ones(10) * 5\n# Printing a message indicating an array of 10 fives\nprint(\"An array of 10 fives:\")\n# Printing the array of 10 fives",
        "detail": "Codes.numpy_examples.numpy_ones",
        "documentation": {}
    },
    {
        "label": "array",
        "kind": 5,
        "importPath": "Codes.numpy_examples.numpy_ones",
        "description": "Codes.numpy_examples.numpy_ones",
        "peekOfCode": "array = np.ones(10) * 5\n# Printing a message indicating an array of 10 fives\nprint(\"An array of 10 fives:\")\n# Printing the array of 10 fives\nprint(array) \n#! Interesting \n# # Importing the NumPy library with an alias 'np'\n# import numpy as np\n# # Creating a 10x10 matrix filled with ones using np.ones()\n# x = np.ones((10, 10))",
        "detail": "Codes.numpy_examples.numpy_ones",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Codes.numpy_examples.numpy_save",
        "description": "Codes.numpy_examples.numpy_save",
        "peekOfCode": "a = np.arange(20)\n# Saving the NumPy array 'a' as a file named 'temp_arra.npy' using np.save()\nnp.save('temp_arra.npy', a)\n# Printing a message checking if the file 'temp_arra.npy' exists or not\nprint(\"Check if 'temp_arra.npy' exists or not?\")\n# Checking if the file 'temp_arra.npy' exists using os.path.exists()\nif os.path.exists('temp_arra.npy'):\n    # Loading the data from 'temp_arra.npy' into 'x2' using np.load()\n    x2 = np.load('temp_arra.npy')\n    # Checking if the loaded array 'x2' is equal to the original array 'a' using np.array_equal()",
        "detail": "Codes.numpy_examples.numpy_save",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": "Codes.numpy_examples.numpy_sort",
        "description": "Codes.numpy_examples.numpy_sort",
        "peekOfCode": "nums = np.array([[5.54, 3.38, 7.99],\n              [3.54, 4.38, 6.99],\n              [1.54, 2.39, 9.29]])\n# Printing a message indicating the original array\nprint(\"Original array:\")\nprint(nums)\n# Sorting the array 'nums' by rows in ascending order and displaying the sorted result\nprint(\"\\nSort the said array by row in ascending order:\")\nprint(np.sort(nums))\n# Sorting the array 'nums' by columns in ascending order and displaying the sorted result",
        "detail": "Codes.numpy_examples.numpy_sort",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "Codes.numpy_examples.numpy_sum",
        "description": "Codes.numpy_examples.numpy_sum",
        "peekOfCode": "x = np.array([[0, 1], [2, 3]])\n# Printing a message indicating the original array 'x'\nprint(\"Original array:\")\nprint(x)\n# Calculating and printing the sum of all elements in the array 'x' using np.sum()\nprint(\"Sum of all elements:\")\nprint(np.sum(x))\n# Calculating and printing the sum of each column in the array 'x' using np.sum() with axis=0\nprint(\"Sum of each column:\")\nprint(np.sum(x, axis=0))",
        "detail": "Codes.numpy_examples.numpy_sum",
        "documentation": {}
    }
]